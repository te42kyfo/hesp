#!/usr/bin/guile \
-e main -s
!#

(use-modules (ice-9 pretty-print)
             (ice-9 format)
             (ice-9 rdelim)
             (ice-9 binary-ports)
             (ice-9 receive)
             (rnrs bytevectors)
             (system foreign))

(load-extension
 (string-append (getcwd) "/guile-opencl/lib/libguile-opencl.so")
 "init_guile_opencl")

(load (string-append (getcwd) "/read-string.scm"))

(define (hesp-print obj)
  (let ((fmt (if (cl-platform? obj) "~22a = ~a~%" "~39a = ~a~%")))
    (map (lambda (x)
           (format #t fmt (car x) (cdr x)))
         (cl-info obj))))

(define (hesp-select list name)
  (let* ((len (length list))
         (selection
          (if (= 1 len)
              (car list)
              (begin
                (format #t "Avilable ~as:~%" name)
                (for-each (lambda (item id)
                            (format #t "~:@(~a~) #~d:~%" name id)
                            (hesp-print item) (newline))
                          list (iota len))
                (format #t "Choose a ~a (from 0 to ~d)~%" name (1- len))
                (list-ref list (string->number (read-line)))))))
    (format #t "Using the following ~a:~%:" name)
    (hesp-print selection)
    (newline)
    selection))

(define (ascii-write N m px py pz vx vy vz port)
  (format port "~d~%" N)
  (let ((buffers (list m px py pz vx vy vz)))
    (do ((i 0 (1+ i)))
        ((>= i N))
      (format port "~{~10,4@f ~}~%"
              (map (lambda (vec)
                     (realvector-ref vec i))
                   buffers)))))

;; these definitions allow both float and double
(define real float)
(define make-realvector make-f32vector)
(define realvector->list f32vector->list)
(define typedef-real "typedef float real;\n")
(define realvector-set! f32vector-set!)
(define realvector-ref f32vector-ref)

(define kernels-src
  (string-concatenate
   (list typedef-real
         (read-string (open-input-file "kernels.cl")))))

(define (main args)

  (if (= 1 (length args))
      (error  "please specify a parameter file!"))
  (let* ((param-file (cadr args))
         (platform (hesp-select (get-cl-platforms) "platform"))
         (device   (hesp-select (get-cl-devices platform) "device"))
         (context  (make-cl-context device))
         (queue    (make-cl-queue context device))
         (program  (build-cl-program
                    (string->cl-program context kernels-src)
                    (list device)
                    ""))
         (build-log (cl-program-build-info program device CL_PROGRAM_BUILD_LOG)))
    (format #t "=== build-log ===\n~a\n== end of build-log ===\n\n" build-log)
    (let ((update-positions-kernel  (make-cl-kernel program "update_positions"))
          (update-velocities-kernel (make-cl-kernel program "update_velocities"))
          (param-alist (let ((tokens (string-tokenize
                                      (read-string (open-input-file param-file)))))
                         (let lp ((alist (list))
                                  (token1 (car  tokens))
                                  (token2 (cadr tokens))
                                  (rest   (cddr tokens)))
                           (if (null? rest)
                               alist
                               (lp (acons token1 (let ((value (string->number token2)))
                                                   (if value value token2)) alist)
                                   (car  rest)
                                   (cadr rest)
                                   (cddr rest)))))))
      (let ((part_input_file           (assoc-ref param-alist "part_input_file"))
            (timestep_length           (assoc-ref param-alist "timestep_length"))
            (time_end                  (assoc-ref param-alist "time_end"))
            (epsilon                   (assoc-ref param-alist "epsilon"))
            (sigma                     (assoc-ref param-alist "sigma"))
            (part_out_freq             (assoc-ref param-alist "part_out_freq"))
            (part_out_name_base        (assoc-ref param-alist "part_out_name_base"))
            (vtk_out_freq              (assoc-ref param-alist "vtk_out_freq"))
            (vtk_out_name_base_attract (assoc-ref param-alist "vtk_out_name_base_attract"))
            (cl_workgroupt_1dsize      (assoc-ref param-alist "workgroup_1dsize")))
        (let* ((port (open-input-file part_input_file))
               (N     (string->number (read-line port)))
               (dt     0.1)
               (px     (make-realvector N 0.0))
               (py     (make-realvector N 0.0))
               (pz     (make-realvector N 0.0))
               (vx     (make-realvector N 0.0))
               (vy     (make-realvector N 0.0))
               (vz     (make-realvector N 0.0))
               (m      (make-realvector N 0.0))
               (fx     (make-realvector N 0.0))
               (fy     (make-realvector N 0.0))
               (fz     (make-realvector N 0.0))
               (px-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (py-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (pz-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (m-dev  (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (fx-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (fy-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (fz-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (vx-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (vy-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float))))
               (vz-dev (make-cl-buffer context CL_MEM_READ_WRITE
                                       (* N (sizeof float)))))
          (let ((buffers (list m px py pz vx vy vz)))
            (do ((i 0 (1+ i)))
                (( >= i N ))
              (let ((line-contents (string-tokenize (read-line port))))
                (map (lambda (buf elem)
                       (realvector-set! buf i (string->number elem)))
                     buffers line-contents))))

          (enqueue-write-cl-buffer queue px-dev 0 px)
          (enqueue-write-cl-buffer queue py-dev 0 py)
          (enqueue-write-cl-buffer queue pz-dev 0 pz)
          (enqueue-write-cl-buffer queue m-dev 0 m)
          (enqueue-write-cl-buffer queue fx-dev 0 fx)
          (enqueue-write-cl-buffer queue fy-dev 0 fy)
          (enqueue-write-cl-buffer queue fz-dev 0 fz)
          (enqueue-write-cl-buffer queue vx-dev 0 vx)
          (enqueue-write-cl-buffer queue vy-dev 0 vy)
          (enqueue-write-cl-buffer queue vz-dev 0 vz)

          (cl-finish queue)

          (set-cl-kernel-arg update-positions-kernel 0 (make-u32vector 1 N) )
          (set-cl-kernel-arg update-positions-kernel 1 (make-realvector 1 dt) )
          (set-cl-kernel-arg update-positions-kernel 2 m-dev)
          (set-cl-kernel-arg update-positions-kernel 3 px-dev)
          (set-cl-kernel-arg update-positions-kernel 4 py-dev)
          (set-cl-kernel-arg update-positions-kernel 5 pz-dev)
          (set-cl-kernel-arg update-positions-kernel 6 vx-dev)
          (set-cl-kernel-arg update-positions-kernel 7 vx-dev)
          (set-cl-kernel-arg update-positions-kernel 8 vz-dev)
          (set-cl-kernel-arg update-positions-kernel 9 fx-dev)
          (set-cl-kernel-arg update-positions-kernel 10 fx-dev)
          (set-cl-kernel-arg update-positions-kernel 11 fz-dev)

          (set-cl-kernel-arg update-velocities-kernel 0 (make-u32vector 1 N) )
          (set-cl-kernel-arg update-velocities-kernel 1 (make-realvector 1 dt) )
          (set-cl-kernel-arg update-velocities-kernel 2 (make-realvector 1 epsilon) )
          (set-cl-kernel-arg update-velocities-kernel 3 (make-realvector 1 sigma) )
          (set-cl-kernel-arg update-velocities-kernel 4 m-dev)
          (set-cl-kernel-arg update-velocities-kernel 5 px-dev)
          (set-cl-kernel-arg update-velocities-kernel 6 py-dev)
          (set-cl-kernel-arg update-velocities-kernel 7 pz-dev)
          (set-cl-kernel-arg update-velocities-kernel 8 vx-dev)
          (set-cl-kernel-arg update-velocities-kernel 9 vy-dev)
          (set-cl-kernel-arg update-velocities-kernel 10 vz-dev)
          (set-cl-kernel-arg update-velocities-kernel 11 fx-dev)
          (set-cl-kernel-arg update-velocities-kernel 12 fy-dev)
          (set-cl-kernel-arg update-velocities-kernel 13 fz-dev)

          (do ((i 0 (1+ i)))
              (( >= i 100 ))
            (enqueue-cl-kernel queue update-positions-kernel
                               (list 0)
                               (list N)
                               (list N))
            (cl-finish queue))
          (enqueue-read-cl-buffer queue px-dev 0 m)
          (enqueue-read-cl-buffer queue px-dev 0 px)
          (enqueue-read-cl-buffer queue py-dev 0 py)
          (enqueue-read-cl-buffer queue pz-dev 0 pz)
          (enqueue-read-cl-buffer queue pz-dev 0 vx)
          (enqueue-read-cl-buffer queue pz-dev 0 vy)
          (enqueue-read-cl-buffer queue pz-dev 0 vz)
          (cl-finish queue)
          (ascii-write N m px py pz vx vy vz
                       (open-output-file
                        (string-append part_out_name_base "FINAL" ".out"))))))))
