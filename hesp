#!/usr/bin/guile \
-e main -s
!#

(use-modules (ice-9 pretty-print)
             (ice-9 format)
             (ice-9 rdelim)
             (ice-9 binary-ports)
             (ice-9 receive)
             (rnrs bytevectors)
             (system foreign))

(load-extension
 (string-concatenate
  (list (getcwd) "/guile-opencl/lib/libguile-opencl.so")) "init_guile_opencl")

(define read-string
  (lambda ()
    (let lp ((string "")
	     (line (read-line)))
      (if (eof-object? line)
	  string
	  (lp (string-append string line)
	      (read-line))))))

; output with exactly the formatting of the reference output
(define (hesp-print obj)
  (let ((fmt (if (cl-platform? obj) "~22a = ~a~%" "~39a = ~a~%")))
    (map (lambda (x)
           (format #t fmt (car x) (cdr x)))
         (cl-info obj))))

(define (hesp-select list name)
  (let* ((len (length list))
         (selection
          (if (= 1 len)
              (car list)
              (begin
                (format #t "Avilable ~as:~%" name)
                (for-each (lambda (item id)
                            (format #t "~:@(~a~) #~d:~%" name id)
                            (hesp-print item) (newline))
                          list (iota len))
                (format #t "Choose a ~a (from 0 to ~d)~%" name (1- len))
                (list-ref list (string->number (read-line)))))))
    ;(format #t "Using the following ~a:~%" name)
    ;(hesp-print selection)
    (newline)
    selection))


(define make-realvector make-f32vector)
(define typedef-real "typedef float real;")

(define kernels-src
  (string-concatenate
   (list typedef-real
         (with-input-from-file
             "kernels.cl" (lambda () (read-string))))))


(define (main args)

  (catch #t
    (lambda ()
      (if (= 1 (length args))
          (throw 'wrong-number-of-args "main" "please specify a parameter file!" #f #f))
      (let* ((platform (hesp-select (get-cl-platforms) "platform"))
             (device   (hesp-select (get-cl-devices platform) "device"))
             (context  (make-cl-context device))
             (queue    (make-cl-queue context device))
             (program  (build-cl-program
                        (string->cl-program context kernels-src)
                        (list device)
                        "-cl-fast-relaxed-math"))
             (update-positions-kernel (make-cl-kernel program "update_positions"))
			 (update-velocities-kernel (make-cl-kernel program "update_velocities")))




		(let* ((param-file (cadr args))
               (N     100)
			   (dt    0.1)
			   (epsilon    1.0)
			   (sigma    0.2)


			   (px     (make-f32vector N 0.0))
			   (py     (make-f32vector N 0.0))
			   (pz     (make-f32vector N 0.0))
			   (vx     (make-f32vector N 0.0))
			   (vy     (make-f32vector N 0.0))
			   (vz     (make-f32vector N 0.0))

			   (m      (make-f32vector N 0.00001))
			   (fx     (make-f32vector N 0.0))
			   (fy     (make-f32vector N 0.0))
			   (fz     (make-f32vector N 0.0))
			   (px-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (py-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (pz-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (m-dev  (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (fx-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (fy-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (fz-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (vx-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (vy-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float))))
			   (vz-dev (make-cl-buffer context CL_MEM_READ_WRITE
									   (* N (sizeof float)))) )

		  (do ((i 0 (1+ i)))
			  (( >= i N ))
			(bytevector-ieee-single-native-set! px (* i (sizeof float)) (/ i N)) )

		  (bytevector-ieee-single-native-set! m 0 100.0)



		  (enqueue-write-cl-buffer queue px-dev 0 px)
		  (enqueue-write-cl-buffer queue py-dev 0 py)
		  (enqueue-write-cl-buffer queue pz-dev 0 pz)
		  (enqueue-write-cl-buffer queue m-dev 0 m)
		  (enqueue-write-cl-buffer queue fx-dev 0 fx)
		  (enqueue-write-cl-buffer queue fy-dev 0 fy)
		  (enqueue-write-cl-buffer queue fz-dev 0 fz)
		  (enqueue-write-cl-buffer queue vx-dev 0 vx)
		  (enqueue-write-cl-buffer queue vy-dev 0 vy)
		  (enqueue-write-cl-buffer queue vz-dev 0 vz)


          (cl-finish queue)

		  (set-cl-kernel-arg update-positions-kernel 0 (make-u32vector 1 N) )
		  (set-cl-kernel-arg update-positions-kernel 1 (make-f32vector 1 dt) )
		  (set-cl-kernel-arg update-positions-kernel 2 m-dev)
		  (set-cl-kernel-arg update-positions-kernel 3 px-dev)
		  (set-cl-kernel-arg update-positions-kernel 4 py-dev)
		  (set-cl-kernel-arg update-positions-kernel 5 pz-dev)
		  (set-cl-kernel-arg update-positions-kernel 6 vx-dev)
		  (set-cl-kernel-arg update-positions-kernel 7 vx-dev)
		  (set-cl-kernel-arg update-positions-kernel 8 vz-dev)
		  (set-cl-kernel-arg update-positions-kernel 9 fx-dev)
		  (set-cl-kernel-arg update-positions-kernel 10 fx-dev)
		  (set-cl-kernel-arg update-positions-kernel 11 fz-dev)

		  (set-cl-kernel-arg update-velocities-kernel 0 (make-u32vector 1 N) )
		  (set-cl-kernel-arg update-velocities-kernel 1 (make-f32vector 1 dt) )
		  (set-cl-kernel-arg update-velocities-kernel 2 (make-f32vector 1 epsilon) )
		  (set-cl-kernel-arg update-velocities-kernel 3 (make-f32vector 1 sigma) )
		  (set-cl-kernel-arg update-velocities-kernel 4 m-dev)
		  (set-cl-kernel-arg update-velocities-kernel 5 px-dev)
		  (set-cl-kernel-arg update-velocities-kernel 6 py-dev)
		  (set-cl-kernel-arg update-velocities-kernel 7 pz-dev)
		  (set-cl-kernel-arg update-velocities-kernel 8 vx-dev)
		  (set-cl-kernel-arg update-velocities-kernel 9 vy-dev)
		  (set-cl-kernel-arg update-velocities-kernel 10 vz-dev)
		  (set-cl-kernel-arg update-velocities-kernel 11 fx-dev)
		  (set-cl-kernel-arg update-velocities-kernel 12 fy-dev)
		  (set-cl-kernel-arg update-velocities-kernel 13 fz-dev)


;          (format #t "~a\n" px)

;		  (do ((i 0 (1+ i)))
;			  (( >= i 100 ))

			(enqueue-cl-kernel queue update-velocities-kernel
                             (list 0)
                             (list N)
                             (list N))

 ;		  (enqueue-cl-kernel queue update-positions-kernel
 ;                           (list 0)
 ;                            (list N)
 ;                            (list N))



		  (enqueue-read-cl-buffer queue fx-dev 0 fx)
          (cl-finish queue)
		  (format #t "~a\n" fx) 






          (format #t "all good!\n"))))
    ; generic exception handler
    (lambda (key . args)
      (format #t "~a in ~a: ~a\n" key (car args) (cadr args)))))

